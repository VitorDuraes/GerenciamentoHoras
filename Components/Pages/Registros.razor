@page "/registros"
@using GerenciamentoHoras.Models
@using GerenciamentoHoras.Services
@inject IRegistroHorasService RegistroService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Gerenciamento de Horas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Gerenciamento de Horas Trabalhadas</h1>
        </div>
    </div>

    <div class="row">
        <!-- Formulário de Inserção -->
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">@(editandoRegistro != null ? "Editar Registro" : "Novo Registro")</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="novoRegistro" OnValidSubmit="SalvarRegistro">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="matricula" class="form-label">Matrícula</label>
                            <InputText id="matricula" class="form-control" @bind-Value="novoRegistro.Matricula" />
                            <ValidationMessage For="@(() => novoRegistro.Matricula)" class="text-danger" />
                        </div>
                         <div class="mb-3">
                            <label for="nome" class="form-label">Nome Profissional</label>
                            <InputText id="nome" class="form-control" @bind-Value="novoRegistro.Nome" />
                            <ValidationMessage For="@(() => novoRegistro.Nome)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="EXT" class="form-label">EXT</label>
                            <InputText id="EXT" class="form-control" @bind-Value="novoRegistro.EXT" />
                            <ValidationMessage For="@(() => novoRegistro.EXT)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="data" class="form-label">Data</label>
                            <InputDate id="data" class="form-control" @bind-Value="novoRegistro.Data" />
                            <ValidationMessage For="@(() => novoRegistro.Data)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="horas" class="form-label">Quantidade de Horas</label>
                            <InputNumber id="horas" class="form-control" @bind-Value="novoRegistro.QuantidadeHoras" step="0.1" />
                            <ValidationMessage For="@(() => novoRegistro.QuantidadeHoras)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="tipo" class="form-label">Tipo</label>
                            <InputSelect id="tipo" class="form-select" @bind-Value="novoRegistro.Tipo">
                                <option value="">Selecione o tipo</option>
                                @foreach (var tipo in Enum.GetValues<TipoRegistro>())
                                {
                                    <option value="@tipo">@GetDisplayName(tipo)</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => novoRegistro.Tipo)" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                @(editandoRegistro != null ? "Atualizar" : "Salvar")
                            </button>
                            @if (editandoRegistro != null)
                            {
                                <button type="button" class="btn btn-secondary" @onclick="CancelarEdicao">
                                    Cancelar
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <!-- Lista de Registros -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">Registros de Horas</h5>
                    <button class="btn btn-success btn-sm" @onclick="ExportarPlanilha">
                        <i class="bi bi-download"></i> Exportar Planilha
                    </button>
                </div>
                <div class="card-body">
                    @if (registros == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                        </div>
                    }
                    else if (!registros.Any())
                    {
                        <div class="alert alert-info">
                            Nenhum registro encontrado.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>Matrícula</th>
                                        <th>Nome Profissional</th>
                                        <th>EXT</th>
                                        <th>Data</th>
                                        <th>Horas</th>
                                        <th>Tipo</th>
                                        <th>Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var registro in registros)
                                    {
                                        <tr>
                                            <td>@registro.Matricula</td>
                                            <td>@registro.Nome</td>
                                            <td>@registro.EXT</td>
                                            <td>@registro.Data.ToString("dd/MM/yyyy")</td>
                                            <td>@registro.QuantidadeHoras.ToString("F1")</td>
                                            <td>
                                                <span class="badge @GetBadgeClass(registro.Tipo)">
                                                    @GetDisplayName(registro.Tipo)
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditarRegistro(registro)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ExcluirRegistro(registro.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<RegistroHoras>? registros;
    private RegistroHoras novoRegistro = new() { Data = DateTime.Today };
    private RegistroHoras? editandoRegistro;

    protected override async Task OnInitializedAsync()
    {
        await CarregarRegistros();
    }

    private async Task CarregarRegistros()
    {
        registros = (await RegistroService.GetAllAsync()).ToList();
    }

    private async Task SalvarRegistro()
    {
        try
        {
            if (editandoRegistro != null)
            {
                novoRegistro.Id = editandoRegistro.Id;
                await RegistroService.UpdateAsync(novoRegistro);
                editandoRegistro = null;
            }
            else
            {
                await RegistroService.CreateAsync(novoRegistro);
            }

            novoRegistro = new() { Data = DateTime.Today };
            await CarregarRegistros();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao salvar registro: {ex.Message}");
        }
    }

    private void EditarRegistro(RegistroHoras registro)
    {
        editandoRegistro = registro;
        novoRegistro = new RegistroHoras
        {
            Matricula = registro.Matricula,
            Nome = registro.Nome,
            EXT = registro.EXT,
            Data = registro.Data,
            QuantidadeHoras = registro.QuantidadeHoras,
            Tipo = registro.Tipo
        };
    }

    private void CancelarEdicao()
    {
        editandoRegistro = null;
        novoRegistro = new() { Data = DateTime.Today };
    }

    private async Task ExcluirRegistro(int id)
    {
        var confirmacao = await JSRuntime.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este registro?");
        if (confirmacao)
        {
            await RegistroService.DeleteAsync(id);
            await CarregarRegistros();
            StateHasChanged();
        }
    }

    private async Task ExportarPlanilha()
    {
        try
        {
            var url = "/api/exportacao/excel";
            await JSRuntime.InvokeVoidAsync("downloadFile", url);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao exportar planilha: {ex.Message}");
        }
    }

    private string GetDisplayName(TipoRegistro tipo)
    {
        return tipo switch
        {
            TipoRegistro.Normal => "Normal",
            TipoRegistro.Atestado => "Atestado",
            TipoRegistro.Ferias => "Férias",
            _ => tipo.ToString()
        };
    }

    private string GetBadgeClass(TipoRegistro tipo)
    {
        return tipo switch
        {
            TipoRegistro.Normal => "bg-success",
            TipoRegistro.Atestado => "bg-warning",
            TipoRegistro.Ferias => "bg-info",
            _ => "bg-secondary"
        };
    }
}

